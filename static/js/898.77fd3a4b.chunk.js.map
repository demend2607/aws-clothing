{"version":3,"file":"static/js/898.77fd3a4b.chunk.js","mappings":"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","sources":["components/button/button.styles.tsx","components/button/Button.component.tsx","components/form-input/formInput.styles.tsx","components/form-input/FormInput.component.tsx","components/contact/contactForm.styles.tsx","components/contact/ContactForm.component.tsx","routes/contact/Contact.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nimport { SpinnerContainer } from '../spinner/spinner.styles';\r\n\r\nexport const BaseButton = styled.button`\r\n\tmin-width: 165px;\r\n\twidth: auto;\r\n\theight: 50px;\r\n\tletter-spacing: 0.5px;\r\n\tline-height: 20px;\r\n\tpadding: 0 35px 0 35px;\r\n\tfont-size: 14px;\r\n\tbackground-color: black;\r\n\tcolor: white;\r\n\ttext-transform: uppercase;\r\n\tfont-family: 'Open Sans Condensed';\r\n\tfont-weight: bolder;\r\n\tborder: none;\r\n\tcursor: pointer;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\t&:hover {\r\n\t\tbackground-color: white;\r\n\t\tcolor: black;\r\n\t\tborder: 1px solid black;\r\n\t}\r\n`;\r\n\r\nexport const GoogleSignInButton = styled(BaseButton)`\r\n\tbackground-color: #4285f4;\r\n\tcolor: white;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #357ae8;\r\n\t\tborder: none;\r\n\t}\r\n`;\r\nexport const InvertedButton = styled(BaseButton)`\r\n\tbackground-color: white;\r\n\tcolor: black;\r\n\tborder: 1px solid black;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: black;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t}\r\n`;\r\n\r\nexport const ButtonSpinner = styled(SpinnerContainer)`\r\n\twidth: 30px;\r\n\theight: 30px;\r\n`;\r\n","import { FC, ButtonHTMLAttributes } from 'react';\r\nimport { BaseButton, GoogleSignInButton, InvertedButton, ButtonSpinner } from './button.styles';\r\n\r\nexport enum BUTTON_TYPE_CLASSES {\r\n\tbase = 'base',\r\n\tgoogle = 'google-sign-in',\r\n\tinverted = 'inverted',\r\n}\r\n\r\nexport type ButtonProps = {\r\n\tbuttonType?: BUTTON_TYPE_CLASSES;\r\n\tisLoading?: boolean;\r\n} & ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton =>\r\n\t({\r\n\t\t[BUTTON_TYPE_CLASSES.base]: BaseButton,\r\n\t\t[BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\r\n\t\t[BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\r\n\t}[buttonType]);\r\n\r\nconst Button: FC<ButtonProps> = ({ children, buttonType, isLoading, ...otherProps }) => {\r\n\tconst CustomButton = getButton(buttonType);\r\n\r\n\treturn (\r\n\t\t<CustomButton disabled={isLoading} {...otherProps}>\r\n\t\t\t{isLoading ? <ButtonSpinner></ButtonSpinner> : children}\r\n\t\t</CustomButton>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import styled, { css } from 'styled-components';\r\n\r\ntype FormInputLabelProps = {\r\n\tshrink?: boolean;\r\n};\r\n\r\nconst subColor = 'grey'; // From scss: $sub-color: grey;\r\nconst mainColor = 'black'; //From scss:  $main-color: black;\r\n\r\nconst shrinkLabelStyles = css`\r\n\ttop: -18px;\r\n\tfont-size: 12px;\r\n\tcolor: ${mainColor};\r\n`;\r\n\r\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\r\n\tcolor: $sub-color;\r\n\tfont-size: 16px;\r\n\tfont-weight: normal;\r\n\tposition: absolute;\r\n\tpointer-events: none;\r\n\tleft: 5px;\r\n\ttop: 10px;\r\n\ttransition: 300ms ease all;\r\n\tbackground: none;\r\n\r\n\t${({ shrink }) => shrink && shrinkLabelStyles}\r\n\r\n\t&.shrink {\r\n\t\t@include shrinkLabel();\r\n\t}\r\n`;\r\n\r\nexport const Input = styled.input`\r\n\tbackground-color: white;\r\n\tcolor: ${subColor};\r\n\tfont-size: 18px;\r\n\tpadding: 10px 10px 10px 5px;\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\tborder: none;\r\n\tborder-radius: 0;\r\n\tborder-bottom: 1px solid ${subColor};\r\n\tmargin: 25px 0;\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t}\r\n\r\n\t&:focus ~ ${FormInputLabel} {\r\n\t\t${shrinkLabelStyles};\r\n\t}\r\n`;\r\nexport const Group = styled.div`\r\n\tposition: relative;\r\n\tmargin: 45px 0;\r\n\r\n\t.form-input {\r\n\t\tbackground: none;\r\n\t}\r\n\tinput[type='password'] {\r\n\t\tletter-spacing: 0.3em;\r\n\t}\r\n`;\r\n","import { FC, InputHTMLAttributes } from 'react';\r\nimport { FormInputLabel, Group, Input } from './formInput.styles';\r\n\r\nexport type FormInputProps = {\r\n\tlabel: string;\r\n} & InputHTMLAttributes<HTMLInputElement>;\r\n\r\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\r\n\treturn (\r\n\t\t<Group>\r\n\t\t\t<Input {...otherProps} />\r\n\t\t\t{label && (\r\n\t\t\t\t// className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}\r\n\t\t\t\t<FormInputLabel\r\n\t\t\t\t\tshrink={Boolean(\r\n\t\t\t\t\t\totherProps.value && typeof otherProps.value === 'string' && otherProps.value.length\r\n\t\t\t\t\t)}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</FormInputLabel>\r\n\t\t\t)}\r\n\t\t</Group>\r\n\t);\r\n};\r\n\r\nexport default FormInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactFormContainer = styled.div`\r\n\twidth: 400px;\r\n\tmargin: 20px auto;\r\n`;\r\n","import { useState, FormEvent, ChangeEvent } from 'react';\r\n\r\nimport { createContactCollection } from '../../utils/firebase/firebase.utils';\r\n\r\nimport FormInput from '../form-input/FormInput.component';\r\nimport Button from '../button/Button.component';\r\n\r\nimport { ContactFormContainer } from './contactForm.styles';\r\n\r\nconst defaultFormFields = {\r\n\tdisplayName: '',\r\n\temail: '',\r\n\tmessage: '',\r\n};\r\nconst ContactForm = () => {\r\n\tconst [formFields, setFormFields] = useState(defaultFormFields);\r\n\tconst { displayName, email, message } = formFields;\r\n\r\n\tconst resetFormFoelds = () => setFormFields(defaultFormFields);\r\n\r\n\tconst handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n\t\tevent.preventDefault();\r\n\t\ttry {\r\n\t\t\tcreateContactCollection(formFields);\r\n\t\t\tresetFormFoelds();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('error xz', error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst { name, value } = event.target;\r\n\r\n\t\tsetFormFields({ ...formFields, [name]: value });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ContactFormContainer>\r\n\t\t\t<h1 className=\"contact-header\">Contact us</h1>\r\n\t\t\t<span className=\"contact-preview\">\r\n\t\t\t\tFeel free to contact us if you need any assistance, any help or another question.\r\n\t\t\t</span>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<FormInput\r\n\t\t\t\t\trequired\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"displayName\"\r\n\t\t\t\t\tvalue={displayName}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<FormInput required label=\"Email\" type=\"email\" name=\"email\" value={email} onChange={handleChange} />\r\n\t\t\t\t<FormInput\r\n\t\t\t\t\trequired\r\n\t\t\t\t\tlabel=\"Message\"\r\n\t\t\t\t\ttype=\"textarea\"\r\n\t\t\t\t\tname=\"message\"\r\n\t\t\t\t\tvalue={message}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button type=\"submit\">Send</Button>\r\n\t\t\t</form>\r\n\t\t</ContactFormContainer>\r\n\t);\r\n};\r\n\r\nexport default ContactForm;\r\n","import ContactForm from '../../components/contact/ContactForm.component';\r\n\r\nconst Contact = () => {\r\n\treturn <ContactForm />;\r\n};\r\n\r\nexport default Contact;\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["BaseButton","styled","button","_templateObject","_taggedTemplateLiteral","GoogleSignInButton","_templateObject2","InvertedButton","_templateObject3","ButtonSpinner","SpinnerContainer","_templateObject4","BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","_objectWithoutProperties","_excluded","CustomButton","_BUTTON_TYPE_CLASSES$","arguments","length","undefined","base","_defineProperty","google","inverted","getButton","_jsx","_objectSpread","disabled","subColor","shrinkLabelStyles","css","FormInputLabel","label","shrink","Input","input","Group","div","_jsxs","Boolean","value","ContactFormContainer","defaultFormFields","displayName","email","message","_useState","useState","_useState2","_slicedToArray","formFields","setFormFields","handleChange","event","_event$target","target","name","className","onSubmit","preventDefault","createContactCollection","error","console","log","FormInput","required","type","onChange","Button","ContactForm","source","excluded","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}